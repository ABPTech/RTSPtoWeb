{{template "head.tmpl" .}}
<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0 text-dark">Multiview</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item active">Multiview</li>
        </ol>
      </div>
    </div>
  </div><!-- /.container-fluid -->
</div>
<div class="content">
  <div class="container-fluid">
    <div class="col-md-12">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">Grid</h5>

          <div class="card-tools">
            <button type="button" onclick="expand()" class="btn btn-tool">
              <i class="fas fa-expand"></i>
            </button>
            <div class="btn-group">
              <button type="button" class="btn btn-tool dropdown-toggle" data-toggle="dropdown">
                <i class="fas fa-th-large"></i>
              </button>
              <div class="dropdown-menu dropdown-menu-right" role="menu">
                <a href="#" class="dropdown-item" onclick="gridMaker(4)"><i class="fas fa-th-large"></i> four players</a>
                <a href="#" class="dropdown-item" onclick="gridMaker(6)"><i class="fas fa-grip-horizontal"></i> six players</a>

              </div>
            </div>
            <div class="btn-group">
              <input type="hidden" id="defaultPlayer" value="mse" />
              <button type="button" class="btn btn-tool dropdown-toggle" data-toggle="dropdown">
                MSE
              </button>
              <div class="dropdown-menu dropdown-menu-right" role="menu">
                <a href="#" class="dropdown-item" onclick="defaultPlayer('mse',this)">MSE</a>
                <a href="#" class="dropdown-item" onclick="defaultPlayer('hls',this)">HLS</a>
                <a href="#" class="dropdown-item" onclick="defaultPlayer('webrtc',this)">WebRTC</a>
              </div>
            </div>

          </div>
        </div>
        <!-- /.card-header -->
        <div class="card-body p-0">
          <div class="grid-wrapper row" id="grid-wrapper">

          </div>
          <div class="modal fade" id="choiseChannel" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="exampleModalLabel">Click on stream to play</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <input type="hidden" id="player-index" value="0" />
                  <div class="row">
                    {{ range $key, $value := .streams }}
                    <div class="col-12 col-sm-6" id="{{ $key }}" onclick="play('{{ $key }}')">
                      {{ if eq .Status 1}}
                        <div class="card  card-success">
                      {{ else }}
                        <div class="card  card-danger">
                      {{end}}
                        <img class="card-img-top stream-img" src="/../static/img/noimage.svg" alt="Card image cap">
                        <div class="stream-name">
                          <h5 class="card-title text-center">{{.Name}}</h5>
                        </div>



                      </div>




                    </div>
                    {{ end }}
                  </div>

                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- ./card-body -->
      </div>
      <!-- /.card -->
    </div>
  </div>


  </div>
  {{template "foot.tmpl" .}}

<script src="/../static/plugins/hlsjs/hls.min.js"></script>
<script>

  const playerType = 'webrtc';
  let fullOpen=false,smallOpen=false;
  let players={};
  $(document).ready(()=>{
    gridMaker();
  });

function defaultPlayer(type,el){
  $('#defaultPlayer').val(type);
  $(el).closest('.btn-group').find('button').html($(el).text());
}

  function gridMaker(col=4){
    let colW='col-6';
    switch (col) {
      case 6:
        colW='col-4';
        break;
      default:
        colW='col-6';
        break;
    }
    destroyGrid();
    for (var i = 0; i < col; i++) {
      $('#grid-wrapper').append('<div class="'+colW+' player" data-player="none" data-uuid="0"><video autoplay ></video><div class="control"><a href="#" class="btn  btn-success btn-xs" onclick="openChoise(this)"><i class="fas fa-plus"></i> Add</a><a href="#" class="btn  btn-info btn-xs" data-expand="0" onclick="expand(this)"><i class="fas fa-expand"></i> Expand</a><a href="#" class="btn  btn-danger btn-xs" data-expand="0" onclick="destoyPlayer('+i+')"><i class="fas fa-times"></i> Delete</a></div></div>');
    }
  }
  function destroyGrid(){
    $('.player').each(function(index){
      destoyPlayer(index);
    });
      $('#grid-wrapper').empty();
  }

  function openChoise(dom){
    $('#player-index').val($(dom).closest('.player').index());
    $('#choiseChannel').modal('show');
  }

  function play(uuid,index){
    if(typeof(index)=='undefined'){
      index=$('#player-index').val();
    }
    $('#choiseChannel').modal('hide');
    //delete prevent video
    destoyPlayer(index);
    $('.player').eq(index).find('video').css('background','#000');

    let playerType = $('#defaultPlayer').val();
    $('.player').eq(index).data('player',playerType);
    switch (playerType) {
      case 'hls':

        let url ='/stream/' + uuid + '/hls/live/index.m3u8';
        if ($('.player').eq(index).find('video')[0].canPlayType('application/vnd.apple.mpegurl')) {
            $('.player').eq(index).find('video')[0].src = url;
            $('.player').eq(index).find('video')[0].load();
        } else if (Hls.isSupported()) {
            players[index] = new Hls({manifestLoadingTimeOut:60000});
            players[index].loadSource(url);
            players[index].attachMedia($('.player').eq(index).find('video')[0]);
        } else {
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Your browser don`t support hls '
            });
        }

        break;
      case 'webrtc':
            players[index]= new WebRTCPlayer(uuid,index);
            players[index].playWebrtc();
        break;
      case 'mse':
      default:

      players[index]=new msePlayer(uuid,index);
      players[index].playMse();
        break;
    }

    // console.log(players[index]);
  }

  function destoyPlayer(index){
    let type=$('.player').eq(index).data('player');
    console.log(type);
    $('.player').eq(index).find('video').css('background','#343a40');
    switch (type) {
      case 'hls':
        if(!!players[index]){
          players[index].destroy();
          delete players[index];
        }
        break;
      case 'mse':
        players[index].destroy();
        delete players[index];

        break;
      case 'webrtc':
        players[index].destroy();
        delete players[index];
        break;
      default:

        break;
    }
    $('.player').eq(index).data('player','');
    $('.player').eq(index).find('video')[0].src = '';
    $('.player').eq(index).find('video')[0].load();
  }

  function expand(element){
    //console.log(fullscreenEnabled(),element);
    if(!!element){
        if(smallOpen){
          smallOpen=false;
          fullscreenOff();
        }else{
          smallOpen=true;
          fullscreenOn($(element).closest('.player')[0]);
        }
    }else{
      if(fullOpen){
        fullOpen=false;
        fullscreenOff();
      }else{
        fullOpen=true;
        fullscreenOn($('#grid-wrapper').parent()[0]);
      }

    }
  }


/*************************mse obect **************************/
function msePlayer(uuid,index){
  this.ws = null,
  this.video=$('.player').eq(index).find('video')[0],
  this.mseSourceBuffer=null,
  this.mse=null,
  this.mseQueue=[],
  this.mseStreamingStarted=false,
  this.uuid=uuid,

  this.playMse=function(){
    let _this=this;
    this.mse = new MediaSource();
    this.video.src=window.URL.createObjectURL(this.mse);

    let potocol = 'ws';
    if (location.protocol == 'https:') {
      potocol = 'wss';
    }
    let ws_url=potocol+'://'+location.host+'/stream/' + this.uuid +'/mse?uuid='+this.uuid;
    this.mse.addEventListener('sourceopen', function(){
      _this.ws=new WebSocket(ws_url);
      _this.ws.binaryType = "arraybuffer";
      _this.ws.onopen = function(event) {
        console.log('Connect to ws');
      }

      _this.ws.onclose = function(event) {
        console.log('disconect');
      }

      _this.ws.onmessage = function(event) {
        let data = new Uint8Array(event.data);
        if (data[0] == 9) {
          decoded_arr=data.slice(1);
          if (window.TextDecoder) {
            mimeCodec = new TextDecoder("utf-8").decode(decoded_arr);
          } else {
            mimeCodec = Utf8ArrayToStr(decoded_arr);
          }
          console.log(mimeCodec);
          _this.mseSourceBuffer = _this.mse.addSourceBuffer('video/mp4; codecs="' + mimeCodec + '"');
          _this.mseSourceBuffer.mode = "segments"
          _this.mseSourceBuffer.addEventListener("updateend", _this.pushPacket.bind(_this));

        } else {
          _this.readPacket(event.data);
        }
      };
    }, false);

  }

  this.readPacket=function(packet){
    if (!this.mseStreamingStarted) {
      this.mseSourceBuffer.appendBuffer(packet);
      this.mseStreamingStarted = true;
      return;
    }
    this.mseQueue.push(packet);

    if (!this.mseSourceBuffer.updating) {
      this.pushPacket();
    }
  },

  this.pushPacket=function(){
    let _this=this;
    if (!_this.mseSourceBuffer.updating) {
      if (_this.mseQueue.length > 0) {
        packet = _this.mseQueue.shift();
        let view = new Uint8Array(packet);
        _this.mseSourceBuffer.appendBuffer(packet);
      } else {
        _this.mseStreamingStarted = false;
      }
    }
    if (_this.video.buffered.length > 0) {
      if (typeof document.hidden !== "undefined" && document.hidden) {
          _this.video.currentTime = _this.video.buffered.end((_this.video.buffered.length - 1)) - 0.5;
      }
    }
  }

  this.destroy=function(){
    this.ws.close(1000, "stop streaming");
  }
}
/*************************end mse obect **************************/
/*************************WEBRTC obect **************************/
function WebRTCPlayer(uuid,index){
  this.webrtc=null;
  this.webrtcSendChannel=null;
  this.webrtcSendChannelInterval=null;
  this.uuid=uuid;
  this.video=$('.player').eq(index).find('video')[0];

  this.playWebrtc=function(){
    var _this=this;
    this.webrtc=new RTCPeerConnection({
      iceServers: [{
        urls: ["stun:stun.l.google.com:19302"]
      }]
    });
    this.webrtc.onnegotiationneeded = this.handleNegotiationNeeded.bind(this);
    this.webrtc.ontrack = function(event) {
      console.log(event.streams.length + ' track is delivered');
        //_this.video.src = URL.createObjectURL(event.streams[0])
      _this.video.srcObject = event.streams[0];
      _this.video.play();
    }
    this.webrtc.addTransceiver('video', {
      'direction': 'sendrecv'
    });
    this.webrtcSendChannel = this.webrtc.createDataChannel('foo');
    this.webrtcSendChannel.onclose = () => console.log('sendChannel has closed');
    this.webrtcSendChannel.onopen = () => {
      console.log('sendChannel has opened');
      this.webrtcSendChannel.send('ping');
      this.webrtcSendChannelInterval =  setInterval(() => {
        this.webrtcSendChannel.send('ping');
      }, 1000)
    }

    this.webrtcSendChannel.onmessage = e => console.log(e.data);
  },
  this.handleNegotiationNeeded = async function(){
    var _this=this;

    offer = await _this.webrtc.createOffer();
    await _this.webrtc.setLocalDescription(offer);
    $.post("/stream/"+_this.uuid+"/webrtc?uuid=" + _this.uuid, {
      data: btoa(_this.webrtc.localDescription.sdp)
    }, function(data) {
      try {
        _this.webrtc.setRemoteDescription(new RTCSessionDescription({
          type: 'answer',
          sdp: atob(data)
        }))
      } catch (e) {
        console.warn(e);
      }

    });
  }

  this.destroy=function(){
    clearInterval(this.webrtcSendChannelInterval);
    this.webrtc.close();
    this.video.srcObject=null;
  }
}

/*********************FULSCREEN******************/
function fullscreenEnabled () {
  return !!(
    document.fullscreenEnabled ||
    document.webkitFullscreenEnabled ||
    document.mozFullScreenEnabled ||
    document.msFullscreenEnabled
  );
}

function fullscreenOn(elem) {
  if (elem.requestFullscreen) {
    elem.requestFullscreen();
  } else if (elem.mozRequestFullScreen) {
    elem.mozRequestFullScreen();
  } else if (elem.webkitRequestFullscreen) {
    elem.webkitRequestFullscreen();
  } else if (elem.msRequestFullscreen) {
    elem.msRequestFullscreen();
  }
}

function fullscreenOff() {
  if(document.requestFullscreen) {
    document.requestFullscreen();
  } else if(document.webkitRequestFullscreen ) {
    document.webkitRequestFullscreen();
  } else if(document.mozRequestFullscreen) {
    document.mozRequestFullScreen();
  }
}

</script>
